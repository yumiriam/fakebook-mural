$ rails new fakebook -d mysql
modificar config/database.yml
	<< user: <seu usuário>
	<< password: <sua senha>
$ rake db:create
modificar Gemfile
	<< gem 'execjs'
	<< gem 'devise'
$ bundle install
$ rails generate controller home index
$ rm public/index.html
modificar config/routes.rb
	<< root :to => 'home#index'
modificar app/view/home/index.html.erb
$ rails generate devise:install
modificar config/environments/development.rb
	<< config.action_mailer.default_url_options = { :host => 'localhost:3000' }
modificar app/views/layouts/application.html.erb
	<< <p class="notice"><%= notice %></p>
  << <p class="alert"><%= alert %></p>
$ rails generate devise User
$ rake db:migrate
$ rails generate devise:views users
modificar config/routes.rb
	<<   devise_for :users, :path => 'users', :path_names => {
  <<		:sign_in => 'login',
  <<		:sign_out => 'logout',
  <<		:password => 'secret',
  <<		:confirmation => 'verification',
  <<		:unlock => 'unblock',
  <<		:registration => 'register',
  <<		:sign_up => 'cmon_let_me_in'
  <<	}
$ rails generate migration add_username_to_users username:string
$ rake db:migrate
modificar app/models/user.rb
	<< attr_accessible :username, :email, :password, :password_confirmation, :remember_me
	<< attr_accessor :login
	<< attr_accessible :login
modificar config/initializers/devise.rb
	<< config.authentication_keys = [ :login ]
	<< config.reset_password_keys = [ :login ]
sobrescrever método find_for_database em app/models/user.rb
	<< def self.find_first_by_auth_conditions(warden_conditions)
  << conditions = warden_conditions.dup
  << if reset_password_token = conditions[:reset_password_token]
  <<   where(conditions).where(["reset_password_token = ?", reset_password_token]).first
  << else
  <<   login = conditions.delete(:login).downcase
  <<   where(conditions).where(["lower(username) = :value OR lower(email) = :value", 
  { :value => login.downcase }]).first
  << end
	<< end
$ rails generate devise:views
modificar app/views/devise/sessions/new.html.erb
modificar app/views/devise/registrations/new.html.erb
modificar app/views/devise/registrations/edit.html.erb
modificar config/locales/en.yml
	<< en:
  << activerecord:
  <<   attributes:
  <<     user:  
  <<       login: "Username or email"
  
$ rails generate scaffold post content:text user:references
$ rake db:migrate
modificar app/controllers/posts_controller.rb
modificar app/views/posts/index.html.erb
modificar app/views/posts/new.html.erb
modificar app/views/posts/edit.html.erb
modificar app/views/posts/show.html.erb

$ rails generate model comment user:references body:text post:references
modificar app/models/user.rb
	<< has_many :comments
modificar app/models/post.rb
	<< has_many :comments
$ rake db:migrate
modificar config/routes.rb
	<< resources :posts do
	<< 	resources :comments
	<< end
$ rails generate controller Comments
criar arquivo app/views/comments/_form.html.erb
	<%= form_for([@post, @post.comments.build]) do |f| %>
		<div class="field">
		  <%= f.label :body %><br />
		  <%= f.text_area :body %>
		</div>
		<div class="actions">
		  <%= f.submit %>
		</div>
	<% end %>
	 
	<%= link_to 'Edit Post', edit_post_path(@post) %> |
	<%= link_to 'Back to Posts', posts_path %> |
criar arquivo app/views/comments/_comment.html.erb
	<% @post.comments.each do |comment| %>
		<p>
		  <b>Commenter:</b>
		  <%= comment.user.username %>
		</p>
	 
		<p>
		  <b>Comment:</b>
		  <%= comment.body %>
		</p>
	<% end %>
modificar app/views/posts/show.html.erb (renders)
	<h2>Comments</h2>
	<%= render :partial => "comments/comment" %>

	<h2>Add a comment:</h2>
	<%= render :partial => "comments/form" %>
modificar app/controllers/comments_controller.rb
	class CommentsController < ApplicationController
		def create
			@post = Post.find(params[:post_id])
			@user = User.find(session[:user_id]) 
			@comment = Comment.create(params[:comment])
			@user.comments << @comment
			redirect_to post_path(@post)
		end
		
		def destroy
		  @post = Post.find(params[:post_id])
		  @comment = @post.comments.find(params[:id])
		  @comment.destroy
		  redirect_to post_path(@post)
		end
	end
	
#
$ rails generate model post_like post:references user:references
$ rails generate model comment_like comment:references user:references
modificar app/models/user.rb
	<< has_many :post_likes
	<< has_many :comment_likes
modificar app/models/post.rb
	<< has_many :post_likes
modificar app/models/comment.rb
	<< has_many :comment_likes
$ rake db:migrate
modificar config/routes.rb
	<< resources :posts do
	<<  	resources :comments do
	<<			resources :comment_likes
	<<  	end
	<<  	resources :post_likes
	<< end
$ rails generate controller PostLikes
$ rails generate controller CommentLikes
